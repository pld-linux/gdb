2004-11-18  Andrew Cagney  <cagney@gnu.org>

        * dwarf2read.c: Include "top.c".
        (dwarf2_has_info): Check for readnever_symbol_files.
        * symfile.c (readnever_symbol_files): Define.
        * top.h (readnever_symbol_files): Declare.
        * main.c (captured_main): Add --readnever option.
        (print_gdb_help): Ditto.

2004-11-18  Andrew Cagney  <cagney@gnu.org>

        * gdb.texinfo (File Options): Document --readnever.

Index: gdb-7.4.50.20120703/gdb/doc/gdb.texinfo
===================================================================
--- gdb-7.4.50.20120703.orig/gdb/doc/gdb.texinfo	2012-07-03 17:30:07.000000000 +0200
+++ gdb-7.4.50.20120703/gdb/doc/gdb.texinfo	2012-07-03 17:31:40.695642449 +0200
@@ -1023,6 +1023,12 @@ Read each symbol file's entire symbol ta
 the default, which is to read it incrementally as it is needed.
 This makes startup slower, but makes future operations faster.
 
+@item --readnever
+@cindex @code{--readnever}
+Do not read each symbol file's symbolic debug information.  This makes
+startup faster but at the expense of not being able to perform
+symbolic debugging.
+
 @end table
 
 @node Mode Options
Index: gdb-7.4.50.20120703/gdb/main.c
===================================================================
--- gdb-7.4.50.20120703.orig/gdb/main.c	2012-07-03 17:30:07.000000000 +0200
+++ gdb-7.4.50.20120703/gdb/main.c	2012-07-03 17:31:40.696642448 +0200
@@ -414,6 +414,7 @@ captured_main (void *data)
       {"xdb", no_argument, &xdb_commands, 1},
       {"dbx", no_argument, &dbx_commands, 1},
       {"readnow", no_argument, &readnow_symbol_files, 1},
+      {"readnever", no_argument, &readnever_symbol_files, 1},
       {"r", no_argument, &readnow_symbol_files, 1},
       {"quiet", no_argument, &quiet, 1},
       {"q", no_argument, &quiet, 1},
@@ -1131,6 +1132,7 @@ Options:\n\n\
   fputs_unfiltered (_("\
   --quiet            Do not print version number on startup.\n\
   --readnow          Fully read symbol files on first access.\n\
+  --readnever        Do not read symbol files.\n\
 "), stream);
   fputs_unfiltered (_("\
   --se=FILE          Use FILE as symbol file and executable file.\n\
Index: gdb-7.4.50.20120703/gdb/symfile.c
===================================================================
--- gdb-7.4.50.20120703.orig/gdb/symfile.c	2012-07-03 17:30:07.000000000 +0200
+++ gdb-7.4.50.20120703/gdb/symfile.c	2012-07-03 17:31:40.697642447 +0200
@@ -81,6 +81,7 @@ static void clear_symtab_users_cleanup (
 
 /* Global variables owned by this file.  */
 int readnow_symbol_files;	/* Read full symbols immediately.  */
+int readnever_symbol_files;	/* Never read full symbols.  */
 
 /* External variables and functions referenced.  */
 
Index: gdb-7.4.50.20120703/gdb/dwarf2read.c
===================================================================
--- gdb-7.4.50.20120703.orig/gdb/dwarf2read.c	2012-07-03 17:30:07.000000000 +0200
+++ gdb-7.4.50.20120703/gdb/dwarf2read.c	2012-07-03 17:31:53.421627153 +0200
@@ -65,6 +65,7 @@
 #include "gdb/gdb-index.h"
 #include <ctype.h>
 #include "gdb_bfd.h"
+#include "top.h"
 
 #include <fcntl.h>
 #include "gdb_string.h"
@@ -1587,8 +1588,9 @@ dwarf2_has_info (struct objfile *objfile
                              (void *) names);
       dwarf2_per_objfile->objfile = objfile;
     }
-  return (dwarf2_per_objfile->info.asection != NULL
-	  && dwarf2_per_objfile->abbrev.asection != NULL);
+  return (! readnever_symbol_files
+	  && (dwarf2_per_objfile->info.asection != NULL
+	      && dwarf2_per_objfile->abbrev.asection != NULL));
 }
 
 /* When loading sections, we look either for uncompressed section or for
Index: gdb-7.4.50.20120703/gdb/top.h
===================================================================
--- gdb-7.4.50.20120703.orig/gdb/top.h	2012-01-23 18:12:30.000000000 +0100
+++ gdb-7.4.50.20120703/gdb/top.h	2012-07-03 17:31:40.700642444 +0200
@@ -60,6 +60,7 @@ extern void set_prompt (const char *s);
 
 /* From random places.  */
 extern int readnow_symbol_files;
+extern int readnever_symbol_files;
 
 /* Perform _initialize initialization.  */
 extern void gdb_init (char *);
