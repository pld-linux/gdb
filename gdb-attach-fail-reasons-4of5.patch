http://sourceware.org/ml/gdb-patches/2012-03/msg00170.html
Subject: [patch 2/3] attach-fail-reasons: Say more than ptrace: Operation not permitted.

Hi,

There is a common question on #gdb and also already described:

http://sourceware.org/gdb/wiki/FAQ
16. Getting an internal error or other error while attaching to processes on
    GNU/Linux
->
    Try setenforce 0 (SELinux) or echo 0 >/proc/sys/kernel/yama/ptrace_scope
    (ptrace scope) to disable system security protections. 

and here is a patch to give some explanations.

More reasons can be given later, this is a container for them and it contains
some useful ones already.

No regressions on {x86_64,x86_64-m32,i686}-fedora17-linux-gnu and with
non-extended gdbserver.

The testcase does not test gdbserver, somehow it is a bit difficult without
having shell on target.

Attaching to process 27480
ptrace: Operation not permitted.
(gdb) _
->
Attaching to process 27480
warning: process 27480 is already traced by process 29011
ptrace: Operation not permitted.
(gdb) _


Thanks,
Jan


gdb/
2012-03-06  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* common/linux-procfs.c (linux_proc_get_int): New, from
	linux_proc_get_tgid.
	(linux_proc_get_tgid): Only call linux_proc_get_int.
	(linux_proc_get_tracerpid): New.
	(linux_proc_pid_has_state): New, from linux_proc_pid_is_zombie.
	(linux_proc_pid_is_stopped, linux_proc_pid_is_zombie): Only call
	linux_proc_pid_has_state.
	* common/linux-procfs.h (linux_proc_get_tracerpid): New declaration.
	* common/linux-ptrace.c: Include linux-procfs.h.
	(linux_ptrace_attach_warnings): New.
	* common/linux-ptrace.h (linux_ptrace_attach_warnings): New declaration.
	* linux-nat.c: Include exceptions.h and linux-ptrace.h.
	(linux_nat_attach): New variable ex.  Wrap to_attach by TRY_CATCH and
	call linux_ptrace_attach_warnings.

gdb/gdbserver/
2012-03-06  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* linux-low.c (linux_attach_lwp_1): Call linux_ptrace_attach_warnings.

gdb/testsuite/
2012-03-06  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* gdb.base/attach-twice.c: New files.
	* gdb.base/attach-twice.exp: New files.

Index: gdb-7.4.50.20120120/gdb/common/linux-procfs.c
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/common/linux-procfs.c	2012-03-06 07:34:00.000000000 +0100
+++ gdb-7.4.50.20120120/gdb/common/linux-procfs.c	2012-03-06 07:34:17.586816449 +0100
@@ -28,67 +28,54 @@
 /* Return the TGID of LWPID from /proc/pid/status.  Returns -1 if not
    found.  */
 
-int
-linux_proc_get_tgid (int lwpid)
+static int
+linux_proc_get_int (int lwpid, const char *field)
 {
+  size_t field_len = strlen (field);
   FILE *status_file;
   char buf[100];
-  int tgid = -1;
+  int retval = -1;
 
   snprintf (buf, sizeof (buf), "/proc/%d/status", (int) lwpid);
   status_file = fopen (buf, "r");
-  if (status_file != NULL)
+  if (status_file == NULL)
     {
-      while (fgets (buf, sizeof (buf), status_file))
-	{
-	  if (strncmp (buf, "Tgid:", 5) == 0)
-	    {
-	      tgid = strtoul (buf + strlen ("Tgid:"), NULL, 10);
-	      break;
-	    }
-	}
-
-      fclose (status_file);
+      warning (_("unable to open /proc file '%s'"), buf);
+      return -1;
     }
 
-  return tgid;
+  while (fgets (buf, sizeof (buf), status_file))
+    if (strncmp (buf, field, field_len) == 0 && buf[field_len] == ':')
+      {
+	retval = strtol (&buf[field_len + 1], NULL, 10);
+	break;
+      }
+
+  fclose (status_file);
+  return retval;
 }
 
-/* Detect `T (stopped)' in `/proc/PID/status'.
-   Other states including `T (tracing stop)' are reported as false.  */
+/* Return the TGID of LWPID from /proc/pid/status.  Returns -1 if not
+   found.  */
 
 int
-linux_proc_pid_is_stopped (pid_t pid)
+linux_proc_get_tgid (int lwpid)
 {
-  FILE *status_file;
-  char buf[100];
-  int retval = 0;
+  return linux_proc_get_int (lwpid, "Tgid");
+}
 
-  snprintf (buf, sizeof (buf), "/proc/%d/status", (int) pid);
-  status_file = fopen (buf, "r");
-  if (status_file != NULL)
-    {
-      int have_state = 0;
+/* See linux-procfs.h.  */
 
-      while (fgets (buf, sizeof (buf), status_file))
-	{
-	  if (strncmp (buf, "State:", 6) == 0)
-	    {
-	      have_state = 1;
-	      break;
-	    }
-	}
-      if (have_state && strstr (buf, "T (stopped)") != NULL)
-	retval = 1;
-      fclose (status_file);
-    }
-  return retval;
+pid_t
+linux_proc_get_tracerpid (int lwpid)
+{
+  return linux_proc_get_int (lwpid, "TracerPid");
 }
 
-/* See linux-procfs.h declaration.  */
+/* Return non-zero if 'State' of /proc/PID/status contains STATE.  */
 
-int
-linux_proc_pid_is_zombie (pid_t pid)
+static int
+linux_proc_pid_has_state (pid_t pid, const char *state)
 {
   char buffer[100];
   FILE *procfile;
@@ -110,8 +97,24 @@ linux_proc_pid_is_zombie (pid_t pid)
 	have_state = 1;
 	break;
       }
-  retval = (have_state
-	    && strcmp (buffer, "State:\tZ (zombie)\n") == 0);
+  retval = (have_state && strstr (buffer, state) != NULL);
   fclose (procfile);
   return retval;
 }
+
+/* Detect `T (stopped)' in `/proc/PID/status'.
+   Other states including `T (tracing stop)' are reported as false.  */
+
+int
+linux_proc_pid_is_stopped (pid_t pid)
+{
+  return linux_proc_pid_has_state (pid, "T (stopped)");
+}
+
+/* See linux-procfs.h declaration.  */
+
+int
+linux_proc_pid_is_zombie (pid_t pid)
+{
+  return linux_proc_pid_has_state (pid, "Z (zombie)");
+}
Index: gdb-7.4.50.20120120/gdb/common/linux-procfs.h
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/common/linux-procfs.h	2012-03-06 07:34:00.000000000 +0100
+++ gdb-7.4.50.20120120/gdb/common/linux-procfs.h	2012-03-06 07:34:17.586816449 +0100
@@ -26,6 +26,11 @@
 
 extern int linux_proc_get_tgid (int lwpid);
 
+/* Return the TracerPid of LWPID from /proc/pid/status.  Returns -1 if not
+   found.  */
+
+extern pid_t linux_proc_get_tracerpid (int lwpid);
+
 /* Detect `T (stopped)' in `/proc/PID/status'.
    Other states including `T (tracing stop)' are reported as false.  */
 
Index: gdb-7.4.50.20120120/gdb/common/linux-ptrace.c
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/common/linux-ptrace.c	2012-03-06 07:34:00.000000000 +0100
+++ gdb-7.4.50.20120120/gdb/common/linux-ptrace.c	2012-03-06 07:34:17.586816449 +0100
@@ -24,3 +24,21 @@
 #endif
 
 #include "linux-ptrace.h"
+#include "linux-procfs.h"
+
+/* Print all possible reasons we could fail to attach PID.  */
+
+void
+linux_ptrace_attach_warnings (pid_t pid)
+{
+  pid_t tracerpid;
+
+  tracerpid = linux_proc_get_tracerpid (pid);
+  if (tracerpid > 0)
+    warning (_("process %d is already traced by process %d"), (int) pid,
+	     (int) tracerpid);
+
+  if (linux_proc_pid_is_zombie (pid))
+    warning (_("process %d is a zombie - the process has already terminated"),
+	     (int) pid);
+}
Index: gdb-7.4.50.20120120/gdb/common/linux-ptrace.h
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/common/linux-ptrace.h	2012-01-04 09:17:18.000000000 +0100
+++ gdb-7.4.50.20120120/gdb/common/linux-ptrace.h	2012-03-06 07:34:17.586816449 +0100
@@ -65,4 +65,6 @@
 #define __WALL          0x40000000 /* Wait for any child.  */
 #endif
 
+extern void linux_ptrace_attach_warnings (pid_t pid);
+
 #endif /* COMMON_LINUX_PTRACE_H */
Index: gdb-7.4.50.20120120/gdb/gdbserver/linux-low.c
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/gdbserver/linux-low.c	2012-03-06 07:34:00.000000000 +0100
+++ gdb-7.4.50.20120120/gdb/gdbserver/linux-low.c	2012-03-06 07:34:17.587816446 +0100
@@ -632,6 +632,7 @@ linux_attach_lwp_1 (unsigned long lwpid,
 	}
 
       /* If we fail to attach to a process, report an error.  */
+      linux_ptrace_attach_warnings (lwpid);
       error ("Cannot attach to lwp %ld: %s (%d)\n", lwpid,
 	     strerror (errno), errno);
     }
Index: gdb-7.4.50.20120120/gdb/linux-nat.c
===================================================================
--- gdb-7.4.50.20120120.orig/gdb/linux-nat.c	2012-03-06 07:34:00.000000000 +0100
+++ gdb-7.4.50.20120120/gdb/linux-nat.c	2012-03-06 07:34:29.860775803 +0100
@@ -59,6 +59,8 @@
 #include "solib.h"
 #include "linux-osdata.h"
 #include "cli/cli-utils.h"
+#include "exceptions.h"
+#include "linux-ptrace.h"
 
 #ifndef SPUFS_MAGIC
 #define SPUFS_MAGIC 0x23c9b64e
@@ -1613,11 +1615,22 @@ linux_nat_attach (struct target_ops *ops
   struct lwp_info *lp;
   int status;
   ptid_t ptid;
+  volatile struct gdb_exception ex;
 
   /* Make sure we report all signals during attach.  */
   linux_nat_pass_signals (0, NULL);
 
-  linux_ops->to_attach (ops, args, from_tty);
+  TRY_CATCH (ex, RETURN_MASK_ERROR)
+    {
+      linux_ops->to_attach (ops, args, from_tty);
+    }
+  if (ex.reason < 0)
+    {
+      pid_t pid = parse_pid_to_attach (args);
+
+      linux_ptrace_attach_warnings (pid);
+      throw_exception (ex);
+    }
 
   /* The ptrace base target adds the main thread with (pid,0,0)
      format.  Decorate it with lwp info.  */
Index: gdb-7.4.50.20120120/gdb/testsuite/gdb.base/attach-twice.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gdb-7.4.50.20120120/gdb/testsuite/gdb.base/attach-twice.c	2012-03-06 07:34:17.589816440 +0100
@@ -0,0 +1,42 @@
+/* This testcase is part of GDB, the GNU debugger.
+
+   Copyright 2011-2012 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+#include <stdlib.h>
+#include <unistd.h>
+#include <sys/ptrace.h>
+#include <errno.h>
+
+int
+main (void)
+{
+  long l;
+
+  switch (fork ())
+  {
+    case -1:
+      perror ("fork");
+      exit (1);
+    case 0:
+      errno = 0;
+      ptrace (PTRACE_ATTACH, getppid (), NULL, NULL);
+      if (errno != 0)
+	perror ("PTRACE_ATTACH");
+      break;
+  }
+  sleep (600);
+  return 0;
+}
Index: gdb-7.4.50.20120120/gdb/testsuite/gdb.base/attach-twice.exp
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ gdb-7.4.50.20120120/gdb/testsuite/gdb.base/attach-twice.exp	2012-03-06 07:34:17.589816440 +0100
@@ -0,0 +1,52 @@
+# Copyright (C) 2012 Free Software Foundation, Inc.
+#
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# Manipulation with PID on target is not supported.
+if [is_remote target] then {
+    return 0
+}
+
+set testfile attach-twice
+set executable ${testfile}
+set binfile ${objdir}/${subdir}/${executable}
+
+if { [prepare_for_testing ${testfile}.exp $executable] } {
+    return -1
+}
+
+set testpid [eval exec $binfile &]
+exec sleep 2
+
+set parentpid 0
+
+set test "attach"
+gdb_test_multiple "attach $testpid" $test {
+    -re "Attaching to program: \[^\r\n\]*, process $testpid\r\n.*warning: process $testpid is already traced by process (\[0-9\]+)\r\n.*ptrace: Operation not permitted\\.\r\n$gdb_prompt $" {
+	set parentpid $expect_out(1,string)
+	pass $test
+    }
+    -re "Attaching to program: \[^\r\n\]*, process $testpid\r\n.*ptrace: Operation not permitted\\.\r\n$gdb_prompt $" {
+	fail $test
+    }
+    -re "\r\n$gdb_prompt $" {
+	xfail $test
+    }
+}
+
+eval exec ps xfw
+if {$parentpid != 0} {
+  eval exec kill -9 $parentpid
+}
+eval exec kill -9 $testpid
